{"ast":null,"code":"import \"firebase/auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport { config } from \"./Config\";\nconst app = firebase.initializeApp(config);\nexport const auth = app.auth();\nexport const firestore = app.firestore();\nexport const db = firebase.firestore();\nexport const storage = app.storage();\nconst GoogleProvider = new firebase.auth.GoogleAuthProvider();\nGoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(GoogleProvider);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport async function updateUser(userId, user) {\n  try {\n    console.log(userId); // console.log(\"this is new stuff\");\n\n    await db.collection(\"users\").doc(userId).update(user); // console.log(`Successfully updated user ${userId}`);\n  } catch (err) {\n    console.error(err);\n  }\n}\nexport async function createUser(userId, user) {\n  try {\n    // console.log(\"creating user with \" + userId);\n    await db.collection(\"users\").doc(userId).set(user);\n  } catch (err) {\n    console.error(err);\n  }\n}\nexport async function AddNewTestForUser(userId, TestInfo, userInfo) {\n  try {\n    // console.log(\"creating doc with \" + userId);\n    var today = new Date();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds(); // console.log(time);\n    // console.log(userId + time + TestInfo.name);\n    // console.log(userInfo, TestInfo);\n\n    await db.collection(\"users\").doc(userId).collection(\"tests\").doc(userId + time + TestInfo.name).set(userInfo, TestInfo);\n    await db.collection(\"users\").doc(userId).collection(\"tests\").doc(userId + time + TestInfo.name).update({\n      testname: TestInfo.name\n    }); // console.log(response);\n    // console.log(\"this worked in users\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n_c = AddNewTestForUser;\nexport async function AddNewTestForAdmin(userId, TestInfo, userInfo) {\n  try {\n    // console.log(\"creating doc with \" + userId);\n    var today = new Date();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds(); // console.log(time);\n    // console.log(userId + time + TestInfo.name);\n    // console.log(userInfo, TestInfo);\n\n    await db.collection(\"current_tests\").doc(userId + time + TestInfo.name).set(userInfo, TestInfo); // console.log(response);\n    // console.log(\"this worked in admin\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n_c2 = AddNewTestForAdmin;\nexport async function CreateTest(docId, data) {\n  try {\n    // console.log(\"creating data with \" + docId);\n    await db.collection(\"available_tests\").doc(docId).set(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n_c3 = CreateTest;\nexport async function UpdateTest(docId, data) {\n  try {\n    console.log(\"updating data with \" + docId);\n    await db.collection(\"available_tests\").doc(docId).update(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n_c4 = UpdateTest;\nexport async function MakeAdmin(userId) {\n  try {\n    // console.log(userId);\n    // console.log(\"this is new stuff\");\n    await db.collection(\"users\").doc(userId).update({\n      role: \"admin\"\n    }); // console.log(`Successfully updated user ${userId}`);\n  } catch (err) {\n    console.error(err);\n  }\n}\n_c5 = MakeAdmin;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddNewTestForUser\");\n$RefreshReg$(_c2, \"AddNewTestForAdmin\");\n$RefreshReg$(_c3, \"CreateTest\");\n$RefreshReg$(_c4, \"UpdateTest\");\n$RefreshReg$(_c5, \"MakeAdmin\");","map":{"version":3,"sources":["/Users/mac/Desktop/tidy-up/tidy-up/src/Firebase/Firebase.js"],"names":["firebase","config","app","initializeApp","auth","firestore","db","storage","GoogleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","updateUser","userId","user","console","log","collection","doc","update","err","error","createUser","set","AddNewTestForUser","TestInfo","userInfo","today","Date","time","getHours","getMinutes","getSeconds","name","testname","AddNewTestForAdmin","CreateTest","docId","data","UpdateTest","MakeAdmin","role"],"mappings":"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","sourcesContent":["import \"firebase/auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nimport { config } from \"./Config\";\n\nconst app = firebase.initializeApp(config);\n\nexport const auth = app.auth();\nexport const firestore = app.firestore();\nexport const db = firebase.firestore();\nexport const storage = app.storage();\n\nconst GoogleProvider = new firebase.auth.GoogleAuthProvider();\nGoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(GoogleProvider);\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport async function updateUser(userId, user) {\n  try {\n    console.log(userId);\n    // console.log(\"this is new stuff\");\n    await db.collection(\"users\").doc(userId).update(user);\n    // console.log(`Successfully updated user ${userId}`);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function createUser(userId, user) {\n  try {\n    // console.log(\"creating user with \" + userId);\n    await db.collection(\"users\").doc(userId).set(user);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function AddNewTestForUser(userId, TestInfo, userInfo) {\n  try {\n    // console.log(\"creating doc with \" + userId);\n    var today = new Date();\n    var time =\n      today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    // console.log(time);\n    // console.log(userId + time + TestInfo.name);\n    // console.log(userInfo, TestInfo);\n    await db\n      .collection(\"users\")\n      .doc(userId)\n      .collection(\"tests\")\n      .doc(userId + time + TestInfo.name)\n      .set(userInfo, TestInfo);\n    await db\n      .collection(\"users\")\n      .doc(userId)\n      .collection(\"tests\")\n      .doc(userId + time + TestInfo.name)\n      .update({ testname: TestInfo.name });\n    // console.log(response);\n    // console.log(\"this worked in users\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function AddNewTestForAdmin(userId, TestInfo, userInfo) {\n  try {\n    // console.log(\"creating doc with \" + userId);\n    var today = new Date();\n    var time =\n      today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    // console.log(time);\n    // console.log(userId + time + TestInfo.name);\n    // console.log(userInfo, TestInfo);\n    await db\n      .collection(\"current_tests\")\n      .doc(userId + time + TestInfo.name)\n      .set(userInfo, TestInfo);\n    // console.log(response);\n    // console.log(\"this worked in admin\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function CreateTest(docId, data) {\n  try {\n    // console.log(\"creating data with \" + docId);\n    await db.collection(\"available_tests\").doc(docId).set(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function UpdateTest(docId, data) {\n  try {\n    console.log(\"updating data with \" + docId);\n    await db.collection(\"available_tests\").doc(docId).update(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport async function MakeAdmin(userId) {\n  try {\n    // console.log(userId);\n    // console.log(\"this is new stuff\");\n    await db.collection(\"users\").doc(userId).update({ role: \"admin\" });\n    // console.log(`Successfully updated user ${userId}`);\n  } catch (err) {\n    console.error(err);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}